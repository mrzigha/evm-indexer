name: Release

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build Release
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare Release Package
        run: |
          mkdir -p release/evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/evm-indexer release/evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu/
          cp README.md LICENSE.md release/evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu/
          cp -r examples release/evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu/
          cp -r docs release/evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu/
          cd release
          tar -czf evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu.tar.gz evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu
          sha256sum evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu.tar.gz > evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu.tar.gz.sha256

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu.tar.gz
          asset_name: evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/gzip

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    needs: [build-and-release, docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.build-and-release.result == 'success' && needs.docker.result == 'success' }}
        run: |
          echo "::notice::Release v${{ github.event.release.tag_name }} built and uploaded successfully"
          echo "::notice::Asset: evm-indexer-v${{ github.event.release.tag_name }}-x86_64-unknown-linux-gnu.tar.gz"
          echo "::notice::Docker Image: ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}"
          echo "::notice::Download URL: ${{ github.event.release.html_url }}"

      - name: Notify Failure
        if: ${{ needs.build-and-release.result == 'failure' || needs.docker.result == 'failure' }}
        run: |
          echo "::error::Release v${{ github.event.release.tag_name }} failed"
          echo "::error::Please check the build logs for details"
